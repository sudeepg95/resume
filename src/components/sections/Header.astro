---
import type { Basics } from '../../utils/schemas/cv-schema';
import { getNetworkIcon, sanitizeUrl } from '../../utils/helpers/data-helpers';
import { Icon } from 'astro-icon/components';

interface Props {
  basics: Basics;
}

const { basics } = Astro.props;
const { name, label, image, email, phone, url, location, profiles, actions } =
  basics;

const processedProfiles =
  profiles
    ?.filter(
      (profile) => profile.network !== 'Email' && profile.network !== 'Phone'
    )
    .map((profile) => ({
      ...profile,
      url: sanitizeUrl(profile.url),
      icon: getNetworkIcon(profile.network),
    }))
    .filter((profile) => profile.url) || [];
---

<header
  class="relative theme-bg text-white overflow-hidden -mx-8 mb-0 md:rounded-t-lg print:bg-none print:text-gray-900 dark:print:text-gray-100 print:border-b-2 print:border-blue-600 print:mx-0 print:rounded-none md:-mx-4"
>
  <div class="absolute inset-0 bg-black bg-opacity-10 dark:bg-opacity-20"></div>

  <div class="relative z-10 px-8 py-12 text-center print:px-0 md:px-4">
    <div class="flex flex-col items-center gap-6 mb-8">
      {
        image && (
          <div class="relative">
            <img
              src={image}
              alt={`${name} profile photo`}
              class="w-30 h-30 rounded-full border-4 border-white border-opacity-20 object-cover shadow-profile print:w-20 print:h-20 print:border-2 print:border-gray-200 dark:print:border-gray-700"
              loading="eager"
            />
          </div>
        )
      }

      <div class="flex flex-col items-center gap-2">
        <h1
          class="name text-5xl font-bold m-0 text-shadow-header print:text-4xl print:text-gray-900 dark:print:text-gray-100 md:text-4xl animate-in fade-in-0 zoom-in-95 duration-1000 delay-500"
          data-text={name}
        >
          {name}
        </h1>
        <h2
          class="text-2xl font-normal m-0 opacity-90 print:text-xl print:text-gray-900 dark:print:text-gray-100 md:text-xl"
        >
          {label}
        </h2>

        {
          url && (
            <a
              href={sanitizeUrl(url)}
              class="inline-flex items-center gap-2 text-white hover:text-white transition-colors duration-150 print:text-gray-900 dark:print:text-gray-100"
              target="_blank"
              rel="noopener noreferrer"
            >
              <span class="sr-only">Visit website</span>
              <Icon name="fa-solid:link" class="w-5 h-5 opacity-80" />
            </a>
          )
        }
      </div>
    </div>

    <div
      class="flex flex-wrap gap-8 justify-center mb-8 print:flex-col print:gap-4 md:gap-4"
    >
      <div class="flex items-center gap-2 text-base">
        <Icon name="fa-solid:envelope" class="w-5 h-5 opacity-80" />
        <a
          href={`mailto:${email}`}
          class="text-white hover:text-white transition-colors duration-150 no-underline print:text-gray-900 dark:print:text-gray-100"
          >{email}</a
        >
      </div>

      {
        phone && (
          <div class="flex items-center gap-2 text-base">
            <Icon name="fa-solid:phone" class="w-5 h-5 opacity-80" />
            <a
              href={`tel:${phone}`}
              class="text-white hover:text-white transition-colors duration-150 no-underline print:text-gray-900 dark:print:text-gray-100"
            >
              {phone}
            </a>
          </div>
        )
      }

      {
        location && (
          <div class="flex items-center gap-2 text-base">
            <Icon name="fa-solid:map-marker-alt" class="w-5 h-5 opacity-80" />
            <span>
              {location.city}{location.country_code && `, ${location.country_code}`}
            </span>
          </div>
        )
      }
    </div>

    {
      processedProfiles.length > 0 && (
        <div class="flex flex-wrap gap-4 justify-center print:hidden">
          {processedProfiles.map((profile) => (
            <a
              href={profile.url!}
              class="flex items-center gap-2 px-6 py-3 bg-white/20 border border-white/30 rounded-full text-white no-underline text-sm font-medium transition-all duration-200 backdrop-blur-sm hover:bg-white/30 hover:-translate-y-1 hover:scale-105"
              target="_blank"
              rel="noopener noreferrer"
              title={`${profile.network}${profile.username ? ` (${profile.username})` : ''}`}
            >
              {profile.network === 'LinkedIn' && (
                <Icon name="fa-brands:linkedin" class="w-5 h-5" />
              )}
              {profile.network === 'GitHub' && (
                <Icon name="fa-brands:github" class="w-5 h-5" />
              )}
              {profile.network === 'Website' && (
                <Icon name="fa-solid:globe" class="w-5 h-5" />
              )}
              {profile.network === 'Email' && (
                <Icon name="fa-solid:envelope" class="w-5 h-5" />
              )}
              {profile.network === 'Phone' && (
                <Icon name="fa-solid:phone" class="w-5 h-5" />
              )}
              <span class="social-text">{profile.network}</span>
            </a>
          ))}
        </div>
      )
    }

    {
      actions && actions.length > 0 && (
        <div class="flex flex-wrap gap-4 justify-center mt-6 no-print">
          {actions.map((action) => (
            <a
              href={action.url}
              class={`action-button action-${action.type} inline-flex items-center gap-2 px-6 py-3 bg-white text-primary font-medium rounded-lg transition-all duration-200 hover:bg-gray-50 hover:-translate-y-1 hover:scale-105`}
              target="_blank"
              rel="noopener noreferrer"
            >
              {action.icon && <span class="action-icon">{action.icon}</span>}
              <span>{action.label}</span>
            </a>
          ))}
        </div>
      )
    }
  </div>
</header>

<style>
  .typing::after {
    content: '|';
    @apply animate-pulse;
  }
</style>

<script>
  function initTypingAnimation() {
    const nameElement = document.querySelector('.name');
    if (!nameElement) return;

    const fullText =
      nameElement.getAttribute('data-text') || nameElement.textContent || '';

    if (
      window.matchMedia('print').matches ||
      window.matchMedia('(prefers-reduced-motion: reduce)').matches
    ) {
      return;
    }

    nameElement.textContent = '';
    nameElement.classList.add('typing');

    let i = 0;
    const typeSpeed = 100;

    function typeWriter() {
      if (i < fullText.length && nameElement) {
        nameElement.textContent += fullText.charAt(i);
        i++;
        setTimeout(typeWriter, typeSpeed);
      } else {
        setTimeout(() => {
          if (nameElement) {
            nameElement.classList.remove('typing');
          }
        }, 1000);
      }
    }

    setTimeout(typeWriter, 1500);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTypingAnimation);
  } else {
    initTypingAnimation();
  }
</script>
