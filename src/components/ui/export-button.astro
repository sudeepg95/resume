---
---

<button
  class="export-button no-print"
  id="export-pdf"
  aria-label="Export as PDF"
>
  <svg class="icon" viewBox="0 0 24 24" fill="currentColor">
    <path
      d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"
    ></path>
  </svg>
  <span class="button-text">Export PDF</span>
  <div class="loading-spinner" id="loading-spinner">
    <svg viewBox="0 0 24 24" fill="currentColor">
      <path
        d="M12,1A11,11 0 1,0 23,12A11,11 0 0,0 12,1M12,3A9,9 0 1,1 3,12A9,9 0 0,1 12,3"
      ></path>
      <path d="M12,3A9,9 0 0,1 21,12H12V3Z">
        <animateTransform
          attributeName="transform"
          type="rotate"
          from="0 12 12"
          to="360 12 12"
          dur="1s"
          repeatCount="indefinite"></animateTransform>
      </path>
    </svg>
  </div>
</button>

<script>
  import { pdfExporter } from '../../utils/pdf-export';

  class ExportButtonComponent {
    private button: HTMLElement | null = null;
    private buttonText: HTMLElement | null = null;
    private spinner: HTMLElement | null = null;

    constructor() {
      this.init();
    }

    private init() {
      this.button = document.getElementById('export-pdf');
      this.buttonText = this.button?.querySelector('.button-text') || null;
      this.spinner = document.getElementById('loading-spinner');

      if (!this.button) return;

      this.button.addEventListener('click', this.handleExport.bind(this));
    }

    private async handleExport() {
      if (!this.button || !this.buttonText || !this.spinner) return;

      // Show loading state
      (this.button as HTMLButtonElement).disabled = true;
      this.buttonText.textContent = 'Exporting...';
      this.spinner.style.display = 'block';

      try {
        // Get CV data for filename
        const nameElement = document.querySelector('.name');
        const name = nameElement?.textContent || 'resume';
        const filename = `${name.replace(/\s+/g, '-').toLowerCase()}-cv.pdf`;

        await pdfExporter.generatePDF({ filename });

        // Show success state briefly
        this.buttonText.textContent = 'Exported!';
        setTimeout(() => {
          this.resetButton();
        }, 2000);
      } catch (error) {
        console.error('Export failed:', error);
        this.buttonText.textContent = 'Export Failed';
        setTimeout(() => {
          this.resetButton();
        }, 3000);
      }
    }

    private resetButton() {
      if (!this.button || !this.buttonText || !this.spinner) return;

      (this.button as HTMLButtonElement).disabled = false;
      this.buttonText.textContent = 'Export PDF';
      this.spinner.style.display = 'none';
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener(
      'DOMContentLoaded',
      () => new ExportButtonComponent()
    );
  } else {
    new ExportButtonComponent();
  }
</script>

<style>
  .export-button {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    z-index: var(--z-fixed);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--color-primary);
    color: var(--color-white);
    border: none;
    border-radius: 2rem;
    padding: 0.875rem 1.5rem;
    font-weight: 600;
    cursor: pointer;
    box-shadow: var(--shadow-lg);
    transition: all var(--transition-normal);
    font-family: var(--font-family-primary);
  }

  .export-button:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: var(--shadow-xl);
    background: var(--color-accent);
  }

  .export-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  .button-text {
    font-size: 0.875rem;
  }

  .loading-spinner {
    width: 1rem;
    height: 1rem;
    display: none;
  }

  @media (max-width: 768px) {
    .export-button {
      bottom: 0.5rem;
      right: 0.5rem;
      padding: 0.75rem 1.25rem;
    }

    .button-text {
      display: none;
    }
  }
</style>
