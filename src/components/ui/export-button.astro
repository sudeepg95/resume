---
---

<button
  class="fixed bottom-4 right-4 no-print flex items-center gap-2 bg-blue-600 dark:bg-blue-500 text-white border-0 rounded-full px-6 py-3.5 font-semibold cursor-pointer shadow-lg transition-all duration-200 font-primary hover:enabled:-translate-y-1 hover:enabled:shadow-xl hover:enabled:bg-blue-700 hover:enabled:dark:bg-blue-400 hover:enabled:scale-105 disabled:opacity-70 disabled:cursor-not-allowed disabled:transform-none md:bottom-2 md:right-2 md:px-5 md:py-3"
  id="export-pdf"
  aria-label="Export as PDF"
  style="z-index: var(--z-fixed);"
>
  <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
    <path
      d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"
    ></path>
  </svg>
  <span class="text-sm md:hidden">Export PDF</span>
  <div class="w-4 h-4 hidden" id="loading-spinner">
    <svg viewBox="0 0 24 24" fill="currentColor">
      <path
        d="M12,1A11,11 0 1,0 23,12A11,11 0 0,0 12,1M12,3A9,9 0 1,1 3,12A9,9 0 0,1 12,3"
      ></path>
      <path d="M12,3A9,9 0 0,1 21,12H12V3Z">
        <animateTransform
          attributeName="transform"
          type="rotate"
          from="0 12 12"
          to="360 12 12"
          dur="1s"
          repeatCount="indefinite"></animateTransform>
      </path>
    </svg>
  </div>
</button>

<script>
  import { pdfExporter } from '../../utils/pdf-export';

  class ExportButtonComponent {
    private button: HTMLElement | null = null;
    private buttonText: HTMLElement | null = null;
    private spinner: HTMLElement | null = null;

    constructor() {
      this.init();
    }

    private init() {
      this.button = document.getElementById('export-pdf');
      this.buttonText = this.button?.querySelector('span') || null;
      this.spinner = document.getElementById('loading-spinner');

      if (!this.button) return;

      this.button.addEventListener('click', this.handleExport.bind(this));
    }

    private async handleExport() {
      if (!this.button || !this.buttonText || !this.spinner) return;

      (this.button as HTMLButtonElement).disabled = true;
      this.buttonText.textContent = 'Exporting...';
      this.spinner.style.display = 'block';

      try {
        const nameElement = document.querySelector('.name');
        const name = nameElement?.textContent || 'resume';
        const filename = `${name.replace(/\s+/g, '-').toLowerCase()}-cv.pdf`;

        await pdfExporter.generatePDF({ filename });

        this.buttonText.textContent = 'Exported!';
        setTimeout(() => {
          this.resetButton();
        }, 2000);
      } catch (error) {
        console.error('Export failed:', error);
        this.buttonText.textContent = 'Export Failed';
        setTimeout(() => {
          this.resetButton();
        }, 3000);
      }
    }

    private resetButton() {
      if (!this.button || !this.buttonText || !this.spinner) return;

      (this.button as HTMLButtonElement).disabled = false;
      this.buttonText.textContent = 'Export PDF';
      this.spinner.style.display = 'none';
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener(
      'DOMContentLoaded',
      () => new ExportButtonComponent()
    );
  } else {
    new ExportButtonComponent();
  }
</script>
