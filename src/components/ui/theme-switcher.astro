---
import { THEME_CONFIGS } from '../../utils/theme-manager';

const themes = Object.entries(THEME_CONFIGS);
---

<div class="theme-switcher no-print" id="theme-switcher">
  <button class="theme-toggle" id="theme-toggle" aria-label="Change theme">
    <svg class="theme-icon sun-icon" viewBox="0 0 24 24" fill="currentColor">
      <path
        d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z"
      ></path>
    </svg>
    <svg class="theme-icon moon-icon" viewBox="0 0 24 24" fill="currentColor">
      <path
        d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 01.818.162z"
      ></path>
    </svg>
  </button>

  <div class="theme-dropdown" id="theme-dropdown">
    <!-- Color Mode Toggle -->
    <div class="mode-toggle-section">
      <label class="mode-toggle-label">
        <span class="mode-label">Dark Mode</span>
        <div class="mode-toggle" id="mode-toggle">
          <input type="checkbox" id="mode-checkbox" />
          <span class="mode-slider"></span>
        </div>
      </label>
    </div>

    <!-- Theme Variants -->
    <div class="theme-section">
      <h4 class="section-title">Themes</h4>
      <div class="theme-grid">
        {
          themes.map(([themeKey, config]) => (
            <button
              class="theme-option"
              data-theme={themeKey}
              title={config.description}
            >
              <div
                class="theme-preview"
                style={`background: linear-gradient(135deg, ${config.primaryColor} 0%, ${config.accentColor} 100%)`}
              />
              <span class="theme-name">{config.name}</span>
            </button>
          ))
        }
      </div>
    </div>
  </div>
</div>

<script>
  import { themeManager } from '../../utils/theme-manager';

  class ThemeSwitcherComponent {
    private toggle: HTMLElement | null = null;
    private dropdown: HTMLElement | null = null;
    private modeToggle: HTMLElement | null = null;
    private modeCheckbox: HTMLInputElement | null = null;
    private sunIcon: HTMLElement | null = null;
    private moonIcon: HTMLElement | null = null;
    private isOpen = false;

    constructor() {
      this.init();
    }

    private init() {
      this.toggle = document.getElementById('theme-toggle');
      this.dropdown = document.getElementById('theme-dropdown');
      this.modeToggle = document.getElementById('mode-toggle');
      this.modeCheckbox = document.getElementById(
        'mode-checkbox'
      ) as HTMLInputElement;
      this.sunIcon = document.querySelector('.sun-icon');
      this.moonIcon = document.querySelector('.moon-icon');

      if (!this.toggle || !this.dropdown) return;

      this.setupEventListeners();
      this.updateUI();
    }

    private setupEventListeners() {
      if (!this.toggle || !this.dropdown) return;

      // Toggle dropdown
      this.toggle.addEventListener('click', (e) => {
        e.stopPropagation();
        this.toggleDropdown();
      });

      // Theme variant selection
      this.dropdown.querySelectorAll('.theme-option').forEach((button) => {
        button.addEventListener('click', (e) => {
          e.stopPropagation();
          const variant = (e.currentTarget as HTMLElement).dataset.theme;
          if (variant) {
            themeManager.setTheme(variant as any);
            this.updateUI();
          }
        });
      });

      // Color mode toggle
      if (this.modeCheckbox) {
        this.modeCheckbox.addEventListener('change', (e) => {
          const isDark = (e.target as HTMLInputElement).checked;
          themeManager.setColorMode(isDark ? 'dark' : 'light');
          this.updateUI();
        });
      }

      // Close on outside click
      document.addEventListener('click', () => {
        this.closeDropdown();
      });

      // Listen for theme changes
      window.addEventListener('themeChange', () => {
        this.updateUI();
      });

      // Close on escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.closeDropdown();
        }
      });
    }

    private toggleDropdown() {
      this.isOpen ? this.closeDropdown() : this.openDropdown();
    }

    private openDropdown() {
      if (!this.dropdown) return;
      this.dropdown.classList.add('open');
      this.isOpen = true;
    }

    private closeDropdown() {
      if (!this.dropdown) return;
      this.dropdown.classList.remove('open');
      this.isOpen = false;
    }

    private updateUI() {
      const currentVariant = themeManager.getCurrentVariant();
      const currentMode = themeManager.getCurrentMode();

      // Update active theme variant
      this.dropdown?.querySelectorAll('.theme-option').forEach((button) => {
        button.classList.toggle(
          'active',
          (button as HTMLElement).dataset.theme === currentVariant
        );
      });

      // Update dark mode toggle
      if (this.modeCheckbox) {
        this.modeCheckbox.checked = currentMode === 'dark';
      }

      // Update main toggle button icon
      if (this.sunIcon && this.moonIcon) {
        this.sunIcon.style.display = currentMode === 'light' ? 'block' : 'none';
        this.moonIcon.style.display = currentMode === 'dark' ? 'block' : 'none';
      }
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener(
      'DOMContentLoaded',
      () => new ThemeSwitcherComponent()
    );
  } else {
    new ThemeSwitcherComponent();
  }
</script>

<style>
  .theme-switcher {
    position: fixed;
    top: 1rem;
    right: 1rem;
    z-index: var(--z-dropdown);
  }

  .theme-toggle {
    width: 3rem;
    height: 3rem;
    border: none;
    border-radius: 50%;
    background: var(--color-background);
    color: var(--color-text);
    box-shadow: var(--shadow-lg);
    cursor: pointer;
    transition: all var(--transition-normal);
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .theme-toggle:hover {
    transform: scale(1.05);
    box-shadow: var(--shadow-xl);
  }

  .theme-icon {
    width: 1.25rem;
    height: 1.25rem;
    position: absolute;
    transition: opacity var(--transition-normal);
  }

  .theme-dropdown {
    position: absolute;
    top: calc(100% + 0.5rem);
    right: calc(100% + 0.5rem);
    min-width: 280px;
    background: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    box-shadow: var(--shadow-xl);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all var(--transition-normal);
    padding: 1rem;
  }

  .theme-dropdown.open {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .mode-toggle-section {
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--color-border);
    margin-bottom: 1rem;
  }

  .mode-toggle-label {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text);
  }

  .mode-label {
    user-select: none;
  }

  .mode-toggle {
    position: relative;
    width: 44px;
    height: 24px;
  }

  .mode-toggle input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .mode-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--color-border);
    transition: var(--transition-normal);
    border-radius: 24px;
  }

  .mode-slider:before {
    position: absolute;
    content: '';
    height: 18px;
    width: 18px;
    left: 3px;
    bottom: 3px;
    background: var(--color-white);
    transition: var(--transition-normal);
    border-radius: 50%;
    box-shadow: 0 2px 4px var(--color-shadow-dark);
  }

  input:checked + .mode-slider {
    background: var(--color-primary);
  }

  input:checked + .mode-slider:before {
    transform: translateX(20px);
  }

  .theme-section {
    padding-top: 0.5rem;
  }

  .section-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--color-text);
    margin-bottom: 0.75rem;
  }

  .theme-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }

  .theme-option {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border: 2px solid transparent;
    border-radius: var(--border-radius);
    background: none;
    cursor: pointer;
    transition: all var(--transition-fast);
  }

  .theme-option:hover {
    border-color: var(--color-border);
    background: var(--color-background-secondary);
  }

  .theme-option.active {
    border-color: var(--color-primary);
    background: var(--color-background-secondary);
  }

  .theme-preview {
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    border: 2px solid var(--color-border-overlay);
  }

  .theme-name {
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--color-text);
  }

  @media (max-width: 768px) {
    .theme-switcher {
      top: 0.5rem;
      right: 0.5rem;
    }

    .theme-toggle {
      width: 2.5rem;
      height: 2.5rem;
    }

    .theme-dropdown {
      min-width: 240px;
    }

    .theme-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
