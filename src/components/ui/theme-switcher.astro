---
import { THEME_CONFIGS } from '@/utils/theme-manager';
import { Icon } from 'astro-icon/components';

const themes = Object.entries(THEME_CONFIGS);
---

<div
  class="fixed top-4 right-4 no-print md:top-2 md:right-2"
  id="theme-switcher"
  style="z-index: var(--z-dropdown);"
>
  <button
    class="w-12 h-12 border-0 rounded-full bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 shadow-lg cursor-pointer transition-all duration-200 flex items-center justify-center relative hover:scale-105 hover:shadow-xl md:w-10 md:h-10"
    id="theme-toggle"
    aria-label="Change theme"
  >
    <Icon
      name="fa-solid:sun"
      class="theme-icon sun-icon w-5 h-5 absolute transition-opacity duration-200"
    />
    <Icon
      name="fa-solid:moon"
      class="theme-icon moon-icon w-5 h-5 absolute transition-opacity duration-200"
    />
  </button>

  <div
    class="theme-dropdown absolute top-full mt-2 right-full mr-2 min-w-72 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-xl opacity-0 invisible -translate-y-2.5 transition-all duration-200 p-4 md:min-w-60"
    id="theme-dropdown"
  >
    <div class="pb-4 mb-4 border-b border-gray-200 dark:border-gray-700">
      <label
        class="flex items-center justify-between cursor-pointer text-sm font-medium text-gray-900 dark:text-gray-100"
      >
        <span class="select-none">Dark Mode</span>
        <div class="mode-toggle relative w-11 h-6" id="mode-toggle">
          <input type="checkbox" id="mode-checkbox" class="opacity-0 w-0 h-0" />
          <span class="mode-slider"></span>
        </div>
      </label>
    </div>

    <div class="pt-2">
      <h4 class="text-sm font-semibold mb-3 text-gray-900 dark:text-gray-100">
        Themes
      </h4>
      <div class="grid grid-cols-2 gap-2 md:grid-cols-1">
        {
          themes.map(([themeKey, config]) => (
            <button
              class="theme-option flex flex-col items-center gap-2 p-3 border-2 border-transparent rounded bg-transparent cursor-pointer transition-all duration-150"
              data-theme={themeKey}
              title={config.description}
            >
              <div class={`theme-thumbnail ${themeKey}`} />
              <span class="text-xs font-medium text-gray-900 dark:text-gray-100">
                {config.name}
              </span>
            </button>
          ))
        }
      </div>
    </div>
  </div>
</div>

<script>
  import { themeManager } from '@/utils/theme-manager';

  class ThemeSwitcherComponent {
    private toggle: HTMLElement | null = null;
    private dropdown: HTMLElement | null = null;
    private modeCheckbox: HTMLInputElement | null = null;
    private sunIcon: HTMLElement | null = null;
    private moonIcon: HTMLElement | null = null;
    private isOpen = false;

    constructor() {
      this.init();
    }

    private init() {
      this.toggle = document.getElementById('theme-toggle');
      this.dropdown = document.getElementById('theme-dropdown');
      this.modeCheckbox = document.getElementById(
        'mode-checkbox'
      ) as HTMLInputElement;
      this.sunIcon = document.querySelector('.sun-icon');
      this.moonIcon = document.querySelector('.moon-icon');

      if (!this.toggle || !this.dropdown) return;

      this.setupEventListeners();
      this.updateUI();
    }

    private setupEventListeners() {
      if (!this.toggle || !this.dropdown) return;

      this.toggle.addEventListener('click', (e) => {
        e.stopPropagation();
        this.toggleDropdown();
      });

      this.dropdown.querySelectorAll('.theme-option').forEach((button) => {
        button.addEventListener('click', (e) => {
          e.stopPropagation();
          const variant = (e.currentTarget as HTMLElement).dataset.theme;
          if (variant) {
            themeManager.setTheme(variant as any);
            this.updateUI();
          }
        });
      });

      if (this.modeCheckbox) {
        this.modeCheckbox.addEventListener('change', (e) => {
          const isDark = (e.target as HTMLInputElement).checked;
          themeManager.setColorMode(isDark ? 'dark' : 'light');
          this.updateUI();
        });
      }

      document.addEventListener('click', () => {
        this.closeDropdown();
      });

      window.addEventListener('themeChange', () => {
        this.updateUI();
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.closeDropdown();
        }
      });
    }

    private toggleDropdown() {
      this.isOpen ? this.closeDropdown() : this.openDropdown();
    }

    private openDropdown() {
      if (!this.dropdown) return;
      this.dropdown.classList.remove(
        'opacity-0',
        'invisible',
        '-translate-y-2.5'
      );
      this.dropdown.classList.add('opacity-100', 'visible', 'translate-y-0');
      this.isOpen = true;
    }

    private closeDropdown() {
      if (!this.dropdown) return;
      this.dropdown.classList.add('opacity-0', 'invisible', '-translate-y-2.5');
      this.dropdown.classList.remove('opacity-100', 'visible', 'translate-y-0');
      this.isOpen = false;
    }

    private updateUI() {
      const currentVariant = themeManager.getCurrentVariant();
      const currentMode = themeManager.getCurrentMode();

      this.dropdown?.querySelectorAll('.theme-option').forEach((button) => {
        const isActive =
          (button as HTMLElement).dataset.theme === currentVariant;
        button.classList.toggle('border-blue-600', isActive);
        button.classList.toggle('dark:border-blue-400', isActive);
        button.classList.toggle('bg-blue-50', isActive);
        button.classList.toggle('dark:bg-blue-900/30', isActive);
        button.classList.toggle('border-transparent', !isActive);
      });

      if (this.modeCheckbox) {
        this.modeCheckbox.checked = currentMode === 'dark';
      }

      if (this.sunIcon && this.moonIcon) {
        this.sunIcon.style.opacity = currentMode === 'light' ? '1' : '0';
        this.moonIcon.style.opacity = currentMode === 'dark' ? '1' : '0';
      }
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener(
      'DOMContentLoaded',
      () => new ThemeSwitcherComponent()
    );
  } else {
    new ThemeSwitcherComponent();
  }
</script>

<style>
  .mode-slider {
    @apply absolute cursor-pointer top-0 left-0 right-0 bottom-0 bg-gray-200 dark:bg-gray-700 rounded-full transition-all duration-200;
  }

  .mode-slider:before {
    @apply absolute h-[18px] w-[18px] left-[3px] bottom-[3px] bg-white rounded-full transition-all duration-200;
    content: '';
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .theme-professional input:checked + .mode-slider {
    @apply bg-blue-700;
  }

  .theme-modern input:checked + .mode-slider {
    @apply bg-emerald-600;
  }

  .theme-creative input:checked + .mode-slider {
    @apply bg-violet-600;
  }

  .theme-minimal input:checked + .mode-slider {
    @apply bg-gray-700;
  }

  input:checked + .mode-slider:before {
    transform: translateX(20px);
  }

  .theme-option:hover {
    @apply border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700/50;
  }
</style>
